# Database Authentication - Query Database Authentication Configuration
# Example Database User Structure
#CREATE TABLE users
#(
#id         bigint NOT NULL,
#disabled   boolean,
#email      character varying(40) COLLATE pg_catalog."default",
#first_name character varying(40) COLLATE pg_catalog."default",
#last_name  character varying(40) COLLATE pg_catalog."default",
#expired    boolean,
#password   character varying(100) COLLATE pg_catalog."default",
#CONSTRAINT users_pkey PRIMARY KEY (id),
#CONSTRAINT uk6dotkott2kjsp8vw4d0m25fb7 UNIQUE (email)
#)
#WITH (
#OIDS = FALSE
#);
#INSERT INTO users(id, disabled, email, first_name, last_name, expired, password)
#VALUES (1, false, 'user1@test.com', 'test', 'user1', false,
#'wasd');

# Authenticates a user by comparing the user password (which can be encoded with a password encoder) against the password on record determined by a configurable database query.
# https://apereo.github.io/cas/6.6.x/authentication/Database-Authentication.html#query-database-authentication
# Required Settings
cas.authn.jdbc.query[0].driver-class=org.postgresql.Driver
cas.authn.jdbc.query[0].url=jdbc:postgresql://localhost:5432/postgres
cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.PostgreSQL95Dialect
cas.authn.jdbc.query[0].user=postgres
cas.authn.jdbc.query[0].password=postgres
cas.authn.jdbc.query[0].sql=SELECT * FROM users WHERE email = ?
cas.authn.jdbc.query[0].field-password=password
cas.authn.jdbc.query[0].password-encoder.type=NONE
# Optional Settings
cas.authn.jdbc.query[0].field-expired=expired
cas.authn.jdbc.query[0].field-disabled=disabled
